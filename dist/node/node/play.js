"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function parseIntegerArgument(e,r){if(e){var a=parseInt(e,10);return isNaN(a)&&(console.log(_i18n2["default"].transplate('Invalid argument: "$[1]".',e)),process.exit(-1)),a}return r}function parseBooleanArgument(e,r){if(e){switch(e.trim().toLowerCase()){case"yes":return!0;case"no":return!1}console.log(_i18n2["default"].transplate('Invalid argument: "$[1]".',e)),process.exit(-1)}return r}Object.defineProperty(exports,"__esModule",{value:!0});var _Organizer=require("../engine/game/Organizer"),_Organizer2=_interopRequireDefault(_Organizer),_Human=require("../engine/players/Human"),_Human2=_interopRequireDefault(_Human),_PoorComputer=require("../engine/players/PoorComputer"),_PoorComputer2=_interopRequireDefault(_PoorComputer),_AverageComputer=require("../engine/players/AverageComputer"),_AverageComputer2=_interopRequireDefault(_AverageComputer),_SmartComputer=require("../engine/players/SmartComputer"),_SmartComputer2=_interopRequireDefault(_SmartComputer),_Reporter=require("../engine/misc/Reporter"),_Reporter2=_interopRequireDefault(_Reporter),_ConsoleTracer=require("./console/ConsoleTracer"),_ConsoleTracer2=_interopRequireDefault(_ConsoleTracer),_ConsolePrompt=require("./console/ConsolePrompt"),_ConsolePrompt2=_interopRequireDefault(_ConsolePrompt),_i18n=require("../engine/misc/i18n"),_i18n2=_interopRequireDefault(_i18n),_path=require("path"),_path2=_interopRequireDefault(_path),_fs=require("fs"),_fs2=_interopRequireDefault(_fs),propertyFile=_path2["default"].join(__dirname,"../../../package.json"),properties=JSON.parse(_fs2["default"].readFileSync(propertyFile,"utf-8")),commander=require("commander").version(properties.version).description("Starts a new mau-mau card game, interacting on the console.  One-based\n  index of the winning player is returned as the program exit code.").usage("[option]").option("-p, --players <integer|list>","Player count (2-4 by default) or list").option("-m, --human <integer|random>",'One-based index of the human player or the\n                              text "random" (nothing by default)',parseIntegerArgument).option("-s, --silent","No console output (false by default)").option("-l, --language <locale>","Translation of texts (env.LANG by default)").option("--continue-to-end <yes|no>","Play until the last player remains with\n                              some cards in his hand (yes by default)",parseBooleanArgument,!0).option("--cards-per-player <integer>","Number of cards that the players are dealt\n                              at the beginning (4 by default)",parseIntegerArgument,4).option("--players-per-deck <integer>","Player count threshold to add another card\n                              deck (4 by default; 5 means another deck)",parseIntegerArgument,4).on("--help",function(){console.log('  Player list is a comma-delimited list of player implementations: "human",'),console.log('  "smart", "average" and "poor" identifiers are available.  A random'),console.log('  variation of "smart,average,poor" is the default.');var e=_i18n2["default"].getTranslations(),r=Object.keys(e.seven);console.log('  Supported locales: "en", "'+r.join('", "')+'".')}).parse(process.argv),locale=commander.language||process.env.LANG;if(locale)try{_i18n2["default"].setLocaleSafely(locale)}catch(error){console.log(error.message)}var game;try{game=_Organizer2["default"].createGame({players:commander.players,human:commander.human,prompt:new _ConsolePrompt2["default"],continueToEnd:commander.continueToEnd,cardsPerPlayer:commander.cardsPerPlayer,playersPerPack:commander.playersPerDeck})}catch(error){console.log(error.message),process.exit(-1)}commander.silent||new _ConsoleTracer2["default"](new _Reporter2["default"](game)),game.on("game:cannot-draw-cards",function(){console.log(_i18n2["default"].translate("Cannot draw cards any more.  Take additional card decks, \ndeal fewer cards, or reduce the count of players.")),process.exit(-1)}).on("game:finished",function(e){process.exit(game.players.indexOf(e)+1)}),exports["default"]=game.start.bind(game);
//# sourceMappingURL=play.js.map
