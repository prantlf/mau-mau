"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function letTopCardAffectPlayer(){var e=checkNewTopCard.call(this);if(e){if(e.rank!==_Ranks2["default"].queen&&(this.chosenSuit=null),e.rank===_Ranks2["default"].ace)return this.emit("rule:pause"),!1;if(e.rank===_Ranks2["default"].seven)return drawTwoCards.call(this),!1}return!0}function checkNewTopCard(){var e=this.game.playingStack.peekAtTopCard();return e!==this.lastTopCard?this.lastTopCard=e:void 0}function drawTwoCards(){var e=this.game.currentPlayer;this.emit("rule:take-two"),e.drawCard(),e.drawCard()}function letPlayerPlay(){var e=this.game.currentPlayer;return e.playCard().then(void 0,function(){e.drawCard()})}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_Ranks=require("./../cards/Ranks"),_Ranks2=_interopRequireDefault(_Ranks),_EventEmitter2=require("./../misc/EventEmitter"),_EventEmitter3=_interopRequireDefault(_EventEmitter2),Rules=function(e){function t(){return _classCallCheck(this,t),_possibleConstructorReturn(this,Object.getPrototypeOf(t).apply(this,arguments))}return _inherits(t,e),_createClass(t,[{key:"attachGame",value:function(e){this.game=e,this.lastTopCard=null,this.chosenSuit=null}},{key:"nextTurn",value:function(){return this.emit("rule:take-turn"),letTopCardAffectPlayer.call(this)?letPlayerPlay.call(this):Promise.resolve()}},{key:"whoWins",value:function(){return this.game.activePlayers.find(function(e){return 0===e.hand.cardCount})}},{key:"pickPlayableCards",value:function(e){var t=this.game.playingStack.peekAtTopCard(),r=this.chosenSuit||t.suit;return e.pickCards(function(e){return e.suit===r||e.rank===t.rank||e.rank===_Ranks2["default"].queen})}},{key:"pickPlayableCardsForSuit",value:function(e,t){return e.filter(function(e){return e.suit===t||e.rank===_Ranks2["default"].queen})}},{key:"defaultCardsPerPlayer",get:function(){return 4}},{key:"defaultPlayersPerPack",get:function(){return 5}},{key:"defaultContinueToEnd",get:function(){return!0}}]),t}(_EventEmitter3["default"]);exports["default"]=Rules;
//# sourceMappingURL=Rules.js.map
